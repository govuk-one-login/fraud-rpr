export enum EventTypes {
  AccountBlock = "accountBlock",
  AccountConcern = "accountConcern",
  AccountCredentialChange = "account-credential-change-required",
  AccountDisabled = "account-disabled",
  AccountEnabled = "account-enabled",
  AccountPurged = "account-purged",
  AssuranceLevelChange = "assurance-level-change",
  CredentialChange = "credential-change",
  CredentialCompromise = "credential-compromise",
  DeviceComplianceChange = "device-compliance-change",
  DeviceConcern = "deviceConcern",
  IdentifierChanged = "identifier-changed",
  IdentifierRecycled = "identifier-recycled",
  OptIn = "opt-in",
  OptOutCancelled = "opt-out-cancelled",
  OptOutEffective = "opt-out-effective",
  OptOutInitiated = "opt-out-initiated",
  RecoveryActivated = "recovery-activated",
  RecoveryInformationChanged = "recovery-information-changed",
  SessionRevoked = "session-revoked",
  SessionsRevoked = "sessions-revoked",
  TokenClaimsChange = "token-claims-change",
}

export enum EventNames {
  AccountBlock = "SSF_INBOUND_ACCOUNT_BLOCK",
  AccountConcern = "SSF_INBOUND_ACCOUNT_CONCERN",
  AccountCredentialChange = "SSF_INBOUND_ACCOUNT_CREDENTIAL_CHANGE_REQUIRED",
  AccountDisabled = "SSF_INBOUND_ACCOUNT_DISABLED",
  AccountEnabled = "SSF_INBOUND_ACCOUNT_ENABLED",
  AccountPurged = "SSF_INBOUND_ACCOUNT_PURGED",
  AssuranceLevelChange = "SSF_INBOUND_ASSURANCE_LEVEL_CHANGE",
  CredentialChange = "SSF_INBOUND_CREDENTIAL_CHANGE",
  CredentialCompromise = "SSF_INBOUND_CREDENTIAL_COMPROMISE",
  DeviceComplianceChange = "SSF_INBOUND_DEVICE_COMPLIANCE_CHANGE",
  DeviceConcern = "SSF_INBOUND_DEVICE_CONCERN",
  IdentifierChanged = "SSF_INBOUND_IDENTIFIER_CHANGED",
  IdentifierRecycled = "SSF_INBOUND_IDENTIFIER_RECYCLED",
  OptIn = "SSF_INBOUND_OPT_IN",
  OptOutCancelled = "SSF_INBOUND_OPT_OUT_CANCELLED",
  OptOutEffective = "SSF_INBOUND_OPT_OUT_EFFECTIVE",
  OptOutInitiated = "SSF_INBOUND_OPT_OUT_INITIATED",
  RecoveryActivated = "SSF_INBOUND_RECOVERY_ACTIVATED",
  RecoveryInformationChanged = "SSF_INBOUND_RECOVERY_INFORMATION_CHANGED",
  SessionRevoked = "SSF_INBOUND_SESSION_REVOKED",
  SessionsRevoked = "SSF_INBOUND_SESSIONS_REVOKED",
  TokenClaimsChange = "SSF_INBOUND_TOKEN_CLAIMS_CHANGE",
}

export enum EventFieldNames {
  ChangeDirection = "change_direction",
  ChangeType = "change_type",
  Claims = "claims",
  CredentialType = "credential_type",
  CurrentLevel = "current_level",
  CurrentStatus = "current_status",
  EventTimestamp = "event_timestamp",
  Fido2Aaguid = "fido2_aaguid",
  FriendlyName = "friendly_name",
  InitiatingEntity = "initiating_entity",
  NewValue = "new-value",
  PreviousStatus = "previous_status",
  Previouslevel = "previous_level",
  Reason = "reason",
  ReasonAdmin = "reason_admin",
  ReasonUser = "reason_user",
  Subject = "subject",
  X509Issuer = "x509_issuer",
  X509Serial = "x509_serial",
}

export const EventRequiredFields = {
  AccountBlock: [EventFieldNames.Subject],
  AccountConcern: [EventFieldNames.Subject],
  AccountCredentialChange: [EventFieldNames.Subject],
  AccountPurged: [EventFieldNames.Subject],
  AccountDisabled: [EventFieldNames.Subject],
  AccountEnabled: [EventFieldNames.Subject],
  IdentifierChanged: [EventFieldNames.Subject, EventFieldNames.NewValue],
  IdentifierRecycled: [EventFieldNames.Subject],
  CredentialCompromise: [
    EventFieldNames.Subject,
    EventFieldNames.CredentialType,
  ],
  DeviceConcern: [EventFieldNames.Subject],
  OptIn: [EventFieldNames.Subject],
  OptOutInitiated: [EventFieldNames.Subject],
  OptOutCancelled: [EventFieldNames.Subject],
  OptOutEffective: [EventFieldNames.Subject],
  RecoveryActivated: [EventFieldNames.Subject],
  RecoveryInformationChanged: [EventFieldNames.Subject],
  SessionsRevoked: [EventFieldNames.Subject],
  SessionRevoked: [EventFieldNames.Subject],
  TokenClaimsChange: [EventFieldNames.Subject, EventFieldNames.Claims],
  CredentialChange: [
    EventFieldNames.Subject,
    EventFieldNames.CredentialType,
    EventFieldNames.ChangeType,
  ],
  AssuranceLevelChange: [
    EventFieldNames.Subject,
    EventFieldNames.CurrentLevel,
    EventFieldNames.Previouslevel,
    EventFieldNames.ChangeDirection,
  ],
  DeviceComplianceChange: [
    EventFieldNames.Subject,
    EventFieldNames.PreviousStatus,
    EventFieldNames.CurrentStatus,
  ],
};
