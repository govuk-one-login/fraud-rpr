AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for outbound messages for relying parties

Parameters:
  Environment:
    Description: Name of Environment to deploy to
    Type: String
    Default: build
    AllowedValues:
      - development
      - build
      - staging
      - integration
      - production
  CodeSigningConfigArn:
    Type: String
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"
  PermissionsBoundary:
    Type: String
    Description: >
      The ARN of the permissions boundary to apply to any role created by the template
    Default: "none"
  VpcStackName:
    Type: "String"
    Description: "The name of the stack that defines the VPC to use"
  BranchName:
    Type: String
    Description: "Name of the branch to be deployed"
    Default: "main"
  DownloadTableName:
    Type: "String"
    Description: "Table name of the DynamoDB used for Download flow"
    Default: "download-table"

Conditions:
  UseCodeSigning: !Not [!Equals [!Ref CodeSigningConfigArn, "none"]]
  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, "none"]]

Globals:
  Function:
    Runtime: nodejs20.x
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    Timeout: 30
    Tracing: Active
    Architectures:
      - arm64
    Environment:
      Variables:
        LOG_LEVEL: INFO
        POWERTOOLS_SERVICE_NAME: inboundSSF
        POWERTOOLS_METRICS_NAMESPACE: !Sub ${Environment}-InboundSSF
        POWERTOOLS_TRACE_ENABLED: true
        POWERTOOLS_TRACER_CAPTURE_HTTPS_REQUESTS: true

Resources:
  ##############################################################
  # Receiver Lambda Activation API Gateway
  ##############################################################
  ReceiverFunctionApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${Environment}-${AWS::StackName}-receiver
      Description: API Gateway to start Receiver Function Lambda
      StageName: !Ref Environment
      EndpointConfiguration:
        Type: REGIONAL
      DisableExecuteApiEndpoint: !If [OnMainBranch, true, false]
      TracingEnabled: true
      CacheClusterEnabled: true
      CacheClusterSize: "0.5"
      MinimumCompressionSize: 0
      DefinitionBody:
        Fn::Sub':
          Name: "AWS::Include"
          Parameters:
            Location: docs/receiver.yaml
      AccessLogSetting:
        DestinationArn: !GetAtt ReceiverFunctionApiLogs.Arn
        Format: '{"sourceIpAddress": "$context.identity.sourceIp","requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","status":$context.status,"responseLatency":$context.responseLatency}'
      MethodSettings:
        - ResourcePath: /*
          HttpMethod: "*"
          LoggingLevel: INFO
          MetricsEnabled: true
          DataTraceEnabled: true
          CachingEnabled: true
          CacheDataEncrypted: true
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Sub "{{resolve:ssm:/${Environment}/ssf/SSFUserPoolArn}}"
            Identity:
              Header: Authorization
            AuthType: "COGNITO_USER_POOLS"
            AuthorizationScopes:
              - "messages/write"
        DefaultAuthorizer: CognitoAuthorizer
        ResourcePolicy:
          IpRangeWhitelist:
            - "51.149.8.67"
            - "51.149.8.107"
            - "51.149.8.0/25"
            - "217.196.229.77"
            - "217.196.229.79"
            - "217.196.229.80"
            - "217.196.229.81"
            - "51.149.8.0/25"
            - "51.149.8.128/29"
            - Fn::ImportValue:
                Fn::Sub: ${VpcStackName}-NatGatewayZoneAEIP
            - Fn::ImportValue:
                Fn::Sub: ${VpcStackName}-NatGatewayZoneBEIP
            - Fn::ImportValue:
                Fn::Sub: ${VpcStackName}-NatGatewayZoneCEIP
            - "3.9.227.33" #Performance Test IP
            - "18.132.149.145" #Performance Test IP

  ReceiverFunctionApiLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogKeyStore.Arn
      RetentionInDays: 30

  ReceiverFunctionApiMapping:
    Condition: ShouldMapApi
    Type: "AWS::ApiGatewayV2::ApiMapping"
    Properties:
      DomainName: !Sub "{{resolve:ssm:/${Environment}/ssf/domain}}"
      ApiId: !Ref ReceiverFunctionApiGateway
      Stage: !Ref ReceiverFunctionApiGateway.Stage

  ##############################################################
  # Inbound Event Receiver Lambda
  ##############################################################
  ReceiverFunction:
    #checkov:skip=CKV_AWS_116: Lambda level DLQs not supported with SQS / Api Gateway Triggers. DLQs at Queue level instead
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Environment:
        Variables:
          LAMBDA_NAME: ReceiverLambda
      FunctionName: !Sub ${Environment}-${AWS::StackName}-inbound-event-receiver
      Description: Inbound Event Receiver Lambda
      CodeUri: src/lambdas/receiver-function
      Handler: handler.handler
      MemorySize: 128
      KmsKeyArn: !GetAtt LambdaKeyStore.Arn
      ReservedConcurrentExecutions: 10
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-AWSServicesEndpointSecurityGroupId
      Events:
        InboundApi:
          Type: Api
          Properties:
            RestApiId: !Ref ReceiverFunctionApiGateway
            Path: /
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - messages/write
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: "es2020"
        EntryPoints:
          - handler.ts

  PermissionForInboundAPItoCallEventReceiverFunction:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ReceiverFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ReceiverFunctionApiGateway}/*/*/*"

  ReceiverLambdaLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ReceiverFunction}"
      KmsKeyId: !GetAtt LogKeyStore.Arn
      RetentionInDays: 30

  ##############################################################
  # Encryption Keys
  ##############################################################
  LogKeyStore:
    Type: AWS::KMS::Key
    Properties:
      Description: Encryption key for Logs
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action: "kms:*"
            Resource: "*"

  LambdaKeyStore:
    Type: AWS::KMS::Key
    Properties:
      Description: Encryption key for Lambda Variables
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
