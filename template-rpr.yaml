AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Application for outbound messages to relying parties.

Parameters:
  Environment:
    Description: Name of Environment to deploy to
    Type: String
    Default: build
    AllowedValues:
      - development
      - build
      - staging
      - integration
      - production
  BranchName:
    Type: String
    Description: "Name of the branch to be deployed"
    Default: "main"
  VpcStackName:
    Type: "String"
    Description: "The name of the stack that defines the VPC to use"

Conditions:
  OnMainBranch: !Or
    - !Equals [!Ref BranchName, "main"]
    - !Not [!Equals [!Ref Environment, development]]
  isNotProduction: !Not [!Equals [!Ref Environment, "production"]]
  ShouldMapApi: !And
    - !Condition isNotProduction
    - !Condition OnMainBranch

Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 10
    Environment:
      Variables:
        AWS_LAMBDA_EXEC_WRAPPER: /opt/dynatrace
        LOG_LEVEL: INFO
        POWERTOOLS_SERVICE_NAME: rpr
        POWERTOOLS_METRICS_NAMESPACE: !Sub ${Environment}-rpr
        DT_CONNECTION_AUTH_TOKEN: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_AUTH_TOKEN}}"
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_CONNECTION_BASE_URL: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_BASE_URL}}"
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_CLUSTER_ID: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CLUSTER_ID}}"
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_LOG_COLLECTION_AUTH_TOKEN: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_LOG_COLLECTION_AUTH_TOKEN}}"
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_TENANT: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_TENANT}}"
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_OPEN_TELEMETRY_ENABLE_INTEGRATION: "true"
      Layers:
        - !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:NODEJS_LAYER}}"
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]

Mappings:
  ##############################################################
  # Dynatrace
  ##############################################################

  EnvironmentConfiguration:
    development:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    build:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    staging:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    integration:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    production:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables

Resources:
  ##############################################################
  # Inbound Event API Gateway
  ##############################################################
  InboundEventApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${Environment}-${AWS::StackName}-inbound-event-receiver
      Description: API Gateway for Inbound Events
      StageName: !Ref Environment
      EndpointConfiguration:
        Type: REGIONAL
      DisableExecuteApiEndpoint: !If [OnMainBranch, true, false]
      TracingEnabled: true
      CacheClusterEnabled: true
      CacheClusterSize: "0.5"
      AccessLogSetting:
        DestinationArn: !GetAtt InboundEventApiLogs.Arn
        Format: '{"sourceIpAddress": "$context.identity.sourceIp","requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","status":$context.status,"responseLatency":$context.responseLatency}'
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Sub "{{resolve:ssm:/${Environment}/ssf/SSFUserPoolArn}}"
            Identity:
              Header: Authorization
            AuthType: "COGNITO_USER_POOLS"
            AuthorizationScopes:
              - "messages/write"
        DefaultAuthorizer: CognitoAuthorizer
        ResourcePolicy:
          IpRangeWhitelist:
            - "51.149.8.67"
            - "51.149.8.107"
            - "51.149.8.0/25"
            - "217.196.229.77"
            - "217.196.229.79"
            - "217.196.229.80"
            - "217.196.229.81"
            - "51.149.8.0/25"
            - "51.149.8.128/29"
            - Fn::ImportValue:
                Fn::Sub: ${VpcStackName}-NatGatewayZoneAEIP
            - Fn::ImportValue:
                Fn::Sub: ${VpcStackName}-NatGatewayZoneBEIP
            - Fn::ImportValue:
                Fn::Sub: ${VpcStackName}-NatGatewayZoneCEIP

  InboundEventApiLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt LogKeyStore.Arn
      RetentionInDays: 30

  InboundEventApiMapping:
    Condition: ShouldMapApi
    Type: "AWS::ApiGatewayV2::ApiMapping"
    Properties:
      DomainName: !Sub "{{resolve:ssm:/${Environment}/ssf/domain}}"
      ApiId: !Ref InboundEventApiGateway
      Stage: !Ref InboundEventApiGateway.Stage

  ##############################################################
  # Receiver Lambda
  ##############################################################
  ReceiverFunction:
    #checkov:skip=CKV_AWS_116: Lambda level DLQs not supported with SQS / Api Gateway Triggers. DLQs at Queue level instead
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Environment:
        Variables:
          LAMBDA_NAME: ReceiverLambda
          VALIDATOR_QUEUE_URL: !Ref InboundEventValidatorQueue
          ENVIRONMENT: !Sub ${Environment}
      FunctionName: !Sub ${Environment}-${AWS::StackName}-receiver
      Description: Function for receiving outbound messages from SSF to RP
      CodeUri: src/lambdas/receiver-lambda
      Handler: handler.handler
      MemorySize: 128
      KmsKeyArn: !GetAtt LambdaKeyStore.Arn
      ReservedConcurrentExecutions: 10
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        SecurityGroupIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-AWSServicesEndpointSecurityGroupId
      Events:
        InboundApi:
          Type: Api
          Properties:
            ResptApiID: !Ref InboundEventApiGateway
            Path: /
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - messages/write
        Policies:
          - SQSSendMessagePolicy:
              QueueName: !GetAtt InboundEventValidatorQueue.QueueName
          - KMSEncryptPolicy:
              KeyId: !Ref QueueKeyStore
          - KMSDecryptPolicy:
              KeyId: !Ref QueueKeyStore
          - KMSDecryptPolicy:
              KeyId: !Ref LambdaKeyStore
          - Statement:
              Sid: queueKeyPermissions
              Effect: Allow
              Action:
                - kms:GenerateDataKey
              Resource: !GetAtt QueueKeyStore.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
      Minify: false
      Target: "es2020"
      EntryPoints:
        - handler.ts

  ##############################################################
  # Encryption Keys
  ##############################################################
  QueueKeyStore:
    Type: AWS::KMS::Key
    Properties:
      Description: Encryption key for Queues
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"

  LogKeyStore:
    Type: AWS::KMS::Key
    Properties:
      Description: Encryption key for Logs
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action: "kms:*"
            Resource: "*"

  LambdaKeyStore:
    Type: AWS::KMS::Key
    Properties:
      Description: Encryption key for Lambda Variables
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"

  SecretsManagerKeyStore:
    Type: AWS::KMS::Key
    Properties:
      Description: Encryption key for secrets manager secrets
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
